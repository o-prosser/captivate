// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  flashcardStudySessions FlashcardStudySession[]
  events                 Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Subject {
  Maths
  Chemistry
  Physics
}

model FlashcardGroup {
  id         String      @id @default(uuid())
  unit       Int
  topic      Int
  subject    Subject
  flashcards Flashcard[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
}

model Flashcard {
  id        String           @id @default(uuid())
  groupId   String
  group     FlashcardGroup   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  front     String           @db.LongText
  back      String           @db.LongText
  studies   FlashcardStudy[]
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt

  @@index([groupId])
}

enum StudyScope {
  Subject
  Unit
  Group
}

enum StudyType {
  All
  Spaced
}

model FlashcardStudySession {
  id                String           @id @default(uuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcardsStudies FlashcardStudy[]
  start             DateTime         @default(now())
  end               DateTime?
  scope             StudyScope
  scopeId           String?
  type              StudyType

  @@index([userId])
}

model FlashcardStudy {
  id          String                @id @default(uuid())
  sessionId   String
  session     FlashcardStudySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  flashcardId String
  flashcard   Flashcard             @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  score       Int // 1-5
  createdAt   DateTime              @default(now())
  updatedAt   DateTime?             @updatedAt

  @@index([sessionId])
  @@index([flashcardId])
}

enum EventCategory {
  Test
  Meeting
  School
  Other
}

model Event {
  id          String        @id @default(uuid())
  date        DateTime
  title       String
  subject     Subject?
  category    EventCategory
  description String?       @db.LongText
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt

  @@index([userId])
}
